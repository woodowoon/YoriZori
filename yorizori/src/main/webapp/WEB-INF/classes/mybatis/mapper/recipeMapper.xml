<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="recipe">
	<!-- 재료시퀀스 -->
	<select id="recipeseq" resultType="Integer">
		SELECT recipe_seq.NEXTVAL FROM dual
	</select>
	<!-- 상황별 카테고리 -->
	<select id="listcaseCategory" parameterType="map" resultType="com.sp.yorizori.recipe.Recipe">
		SELECT caseNum, caseName FROM caseCategory
			ORDER BY caseNum
	</select>
	
	<!-- 나라별 카테고리 -->
	<select id="listcountryCategory" parameterType="map" resultType="com.sp.yorizori.recipe.Recipe">
		SELECT countryNum, countryName FROM countryCategory
			ORDER BY countryNum
	</select>
	
	<!-- 재료 카테고리 -->
	<select id="listingredient" parameterType="map" resultType="com.sp.yorizori.recipe.Recipe">
		SELECT ingredientCode, ingredientName, NVL(parent, 0) parent, ingredimageName
		FROM ingredient
		<where>
			<choose>
				<when test="parent==null">
					parent IS NULL
				</when>
				<otherwise>
					parent = #{parent}
				</otherwise>
			</choose>
		</where>
		ORDER BY ingredientCode
	</select>
	
	<!-- 레시피 등록 -->
	<insert id="insertRecipe" parameterType="com.sp.yorizori.recipe.Recipe">
		INSERT INTO recipe (recipeNum, caseNum, countryNum, recipeSubject, recipeHitcount, TO_CHAR(recipeReg_date, 'YYYY-MM-DD') recipeReg_date, recipeServing, recipeLevel, 
   			 recipeContent, recipeTime,userId, active) VALUES 
   		(#{recipeNum}, #{caseNum}, #{countryNum}, #{recipeSubject}, 0, SYSDATE, 
   		#{recipeServing}, #{recipeLevel}, #{recipeContent}, #{recipeTime}, #{userId}, 0)
	</insert>
	
	<!-- 레시피 포토 등록 -->
	<insert id="insertRecipePhoto" parameterType="com.sp.yorizori.recipe.Recipe">
		INSERT INTO recipePhoto (recipenum, recipephotoName) VALUES (#{recipeNum}, #{imageFilename, jdbcType=VARCHAR})
	</insert>
	
	<!-- 레시피 재료 등록 -->
	<insert id="insertingredientList" parameterType="com.sp.yorizori.recipe.Recipe">
		INSERT INTO ingredientList (num, recipeNum , ingredientCode) VALUES (ingredientList_seq.NEXTVAL, #{recipeNum}, #{ingredientCode})
	</insert>
	
	<!-- 좋아요 개수 -->
	<select id="recipeLikeCount" resultType="Integer">
		SELECT NVL(COUNT(*), 0) recipeLikeCount FROM recipeLike WHERE recipeNum = #{recipeNum}
	</select>
	
	<!-- 해당 유저가 좋아요했는지 여부 -->
	<select id="isRecipeLike" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM recipeLike WHERE recipeNum = #{recipeNum} AND userId = #{userId}
	</select>
	
	<insert id="insertRecipeLike" parameterType="map">
		INSERT INTO recipeLike(recipeNum, userId) VALUES (#{recipeNum}, #{userId})
	</insert>
	
	<delete id="deleteRecipeLike" parameterType="map">
		DELETE FROM recipeLike WHERE recipeNum = #{recipeNum} AND userId = #{userId}
	</delete>
	
	<!-- 팔로우 유무 -->
	<select id="isFollow" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) FROM follow WHERE follower_id = #{userId}
	</select>
	
	<select id="dataCount" resultType="Integer" parameterType="map">
		SELECT COUNT(*)
		FROM recipe r
		JOIN member m ON m.userId = r.userId
		LEFT OUTER JOIN (
		    SELECT follower_id, following_id FROM follow
	    ) f ON r.userId = f.following_id 
	    <where>
			<choose>
				<when test="isFollow == true">
					follower_id = #{userId} OR (m.userId = #{userId})
				</when>
				<otherwise>
					r.countryNum = #{userCountryNum} OR (m.userId = #{userId})
				</otherwise>
			</choose>
		</where>

	</select>
	
	<!-- feed -->
	<select id="listRecipeFeed" resultType="com.sp.yorizori.recipe.Recipe" parameterType="map">
		SELECT * FROM (
		    SELECT ROWNUM rnum, tb.* FROM (
		        SELECT r.recipeNum recipeNum, r.countryNum countryNum, recipeSubject, nickName, memberImageName, imageFilename, 
		            NVL(recipeLikeCount, 0) recipeLikeCount, follower_id, NVL(userRecipeLike, 0) userRecipeLike
		            FROM recipe r
		            JOIN member m ON m.userId = r.userId
	                LEFT OUTER JOIN (
	                    SELECT recipeNum, COUNT(*) recipeLikeCount FROM recipeLike
	                    GROUP BY recipeNum
	                ) rl ON rl.recipeNum = r.recipeNum  
	                LEFT OUTER JOIN (
	                    SELECT userId, memberImageName FROM memberImage 
	                ) mi ON mi.userId = r.userId
	                LEFT OUTER JOIN (
	                    SELECT recipeNum, recipePhotoName imageFilename FROM recipePhoto
	                ) rp ON r.recipeNum = rp.recipeNum
	                LEFT OUTER JOIN (
	                    SELECT follower_id, following_id FROM follow
	                ) f ON r.userId = f.following_id
	                LEFT OUTER JOIN (
	                	SELECT recipeNum, NVL(COUNT(*), 0) userRecipeLike FROM recipeLike 
	                	WHERE userId = #{userId}
	                	GROUP BY recipeNum
	                ) ur ON r.recipeNum = ur.recipeNum
		             <where>
						<choose>
							<when test="isFollow == true">
								follower_id = #{userId} OR (m.userId = #{userId})
							</when>
							<otherwise>
								r.countryNum = #{userCountryNum} OR (m.userId = #{userId})
							</otherwise>
						</choose>		             
		             </where>
		            ORDER BY recipeLikeCount DESC
		        ) tb WHERE ROWNUM &lt;= #{end}
		) WHERE rnum &gt;= #{start}
	</select>
	
	<select id="readRecipe" parameterType="Integer" resultType="com.sp.yorizori.recipe.Recipe">
		SELECT r.recipeNum recipeNum, caseNum, countryNum, recipeSubject, recipeHitCount, 
			TO_CHAR(recipeReg_date, 'YYYY-MM-DD') recipeReg_date, recipeServing, imageFilename,
	       	recipeTime, recipeLevel, recipeContent, r.userId userId, nickName, memberImageName, NVL(recipeLikeCount, 0) recipeLikeCount
	    		FROM recipe r
		    LEFT OUTER JOIN (
		        SELECT recipeNum, COUNT(*) recipeLikeCount FROM recipeLike rl
		        GROUP BY recipeNum
		    ) rl ON rl.recipeNum = r.recipeNum
		    LEFT OUTER JOIN (
		        SELECT userId, memberImageName FROM memberImage mi
		    ) mi ON mi.userId = r.userId
		    LEFT OUTER JOIN (
	             SELECT recipeNum, recipePhotoName imageFilename FROM recipePhoto
	        ) rp ON r.recipeNum = rp.recipeNum
		    LEFT OUTER JOIN (
		        SELECT userId, nickName FROM member m
		    ) m ON m.userId = r.userId
	    WHERE r.recipeNum = #{recipeNum}
	</select>
	
	<select id="preReadRecipe" parameterType="map" resultType="com.sp.yorizori.recipe.Recipe">
		SELECT * FROM (
		    SELECT r.recipeNum, recipeSubject, NVL(recipeLikeCount, 0) recipeLikeCount, r.countryNum countryNum, follower_id, r.userId userId
		        FROM recipe r
		        JOIN member m ON m.userId = r.userId
		        LEFT OUTER JOIN (
		            SELECT recipeNum, COUNT(*) recipeLikeCount FROM recipeLike
		            GROUP BY recipeNum 
		        ) rl ON rl.recipeNum = r.recipeNum
		        LEFT OUTER JOIN (
		            SELECT follower_id, following_id FROM follow
		        ) f ON r.userId = f.following_id
		    <where>
				<choose>
					<when test="isFollow == true">
						follower_id = #{userId} OR (m.userId = #{userId})
					</when>
					<otherwise>
						r.countryNum = #{userCountryNum} OR (m.userId = #{userId})
					</otherwise>
				</choose>	
				AND (r.recipeNum &gt; #{recipeNum})	             
             </where>
		    ORDER BY recipeLikeCount DESC
		)WHERE ROWNUM = 1
	</select>
	
	<select id="nextReadRecipe" parameterType="map" resultType="com.sp.yorizori.recipe.Recipe">
		SELECT * FROM (
		    SELECT r.recipeNum, recipeSubject, NVL(recipeLikeCount, 0) recipeLikeCount, r.countryNum countryNum, follower_id, r.userId userId
		        FROM recipe r
		        JOIN member m ON m.userId = r.userId
		        LEFT OUTER JOIN (
		            SELECT recipeNum, COUNT(*) recipeLikeCount FROM recipeLike
		            GROUP BY recipeNum 
		        ) rl ON rl.recipeNum = r.recipeNum
		        LEFT OUTER JOIN (
		            SELECT follower_id, following_id FROM follow
		        ) f ON r.userId = f.following_id
		    <where>
				<choose>
					<when test="isFollow == true">
						follower_id = #{userId} OR (m.userId = #{userId})
					</when>
					<otherwise>
						r.countryNum = #{userCountryNum} OR (m.userId = #{userId})
					</otherwise>
				</choose>	
				AND (r.recipeNum &lt; #{recipeNum})	             
             </where>
		    ORDER BY recipeLikeCount DESC
		)WHERE ROWNUM = 1
	</select>
	
	<update id="updateHitCount" parameterType="Integer">
		UPDATE recipe SET recipeHitCount = recipeHitCount+1 WHERE recipeNum = #{recipeNum}
	</update>
	
	<select id="readRecipeingredient" parameterType="Integer" resultType="com.sp.yorizori.recipe.Recipe">
		SELECT recipeNum, il.ingredientCode ingredientCode, ingredientName, parent
		    FROM ingredientList il
		    LEFT OUTER JOIN (
		        SELECT ingredientCode, ingredientName, parent FROM ingredient i
		    ) i ON i.ingredientCode = il.ingredientCode
		WHERE recipeNum = #{recipeNum}
	</select>
	
	<delete id="deleteRecipe" parameterType="Integer">
		DELETE FROM recipe WHERE recipeNum = #{recipeNum}
	</delete>
	
</mapper>